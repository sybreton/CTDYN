import py_ctdyn
import os, re, subprocess
import importlib.resources
from pathlib import Path

def get_ctdyn_dir () :
  """
  Get CTDYN directory path through the
  ``CTDYN_DIR`` environment variable.

  Returns
  -------
  str
    The path stored in the ``CTDYN_DIR``
    environment variable.
  """
  try :
    ctdyn_dir = os.environ["CTDYN_DIR"]
  except KeyError :
    raise Exception ("CTDYN_DIR environment variable not found. Check that CTDYN is properly installed.")
  return ctdyn_dir

def _get_dir_out (ctdyn_param) :
  """
  Get output directory and modify input inlist
  so the inlist can be created inside it.

  Parameters
  ----------
  ctdyn_param : dict
    Dictionary of CTDYN namelists, each namelist being
    formatted itself as a dictionary with pairs 
    ``name:value``. Optional, default ``None``.

  Returns
  -------
  str
    The CTDYN output directory.
  """
  # After set_default_inlist is called, this key has 
  # to exist.
  dir_out = ctdyn_param["outputs"]["dir"]
  # Remove (possible) additional quote characters 
  dir_out = re.search (r"[^\"\']+", dir_out).group (0)
  return dir_out
  

def run_ctdyn (ctdyn_param=None, verbose=True,
               rerun=True) :
  """
  Run CTDYN for a selected set of inputs provided in 
  ``ctdyn_param``.

  Parameters
  ----------
  ctdyn_param : dict
    Dictionary of CTDYN namelists, each namelist being
    formatted itself as a dictionary with pairs 
    ``name:value``. Optional, default ``None``.

  verbose : bool
    Output verbosity.
    Optional, default ``True``.

  rerun : bool
    If set to ``False``, CTDYN will not be run if
    the inlist file exists in the output directory. 
    Optional, default ``True``. 

  Returns
  -------
  dict
    The dictionary with input parameters used by CTDYN.
  """
  ctdyn_dir = get_ctdyn_dir ()
  ctdyn_param = set_default_inlist (parameters=ctdyn_param)
  dir_out  = _get_dir_out (ctdyn_param)
  if dir_out is not None and not os.path.exists (dir_out) :
    os.mkdir (dir_out)
  ctdyn_in = os.path.join (dir_out, "inlist_ctdyn")
  if not rerun and os.path.exists (ctdyn_in) :
    if verbose :
      print ("Inlist file already exists and rerun=False, CTDYN was not executed.")
  else :
    make_inlist (parameters=ctdyn_param, filename=ctdyn_in)
    if verbose :
      print ("Running CTDYN with input file '{}'.".format (ctdyn_in))
    with (open (os.path.join (dir_out, "ctdyn.out"), "w") as stdout,
          open (os.path.join (dir_out, "ctdyn.err"), "w") as stderr) :
      subprocess.run ("{}/bin/ctdyn {}".format (ctdyn_dir, ctdyn_in), 
                      stdout=stdout, stderr=stderr, shell=True,
                      check=True)
  return ctdyn_param

def make_inlist (parameters=None, filename=None) :
  """
  Make the inlist file for the model using a default
  parameter dictionary or the parameter dictionary 
  provided by the user.

  Parameters
  ----------
  parameters : dict
    Dictionary of CTDYN namelists, each namelist being
    formatted itself as a dictionary with pairs 
    ``name:value``. Optional, default ``None``.

  filename : str or Path object
    Filename to use in order to write the inlist file.
    If ``None``, no file will be written.
    Optional, default ``None``.

  Returns 
  -------
  list
    List of strings, each corresponding to a line of the
    output file. 
  """
  parameters = set_default_inlist (parameters)

  template = load_inlist_template ()
  for elt in parameters.items () :
    template = insert_namelist (template, elt[0],
                                elt[1])
  if filename is not None :
    save_template (filename, template)
  return template 

def load_inlist_template () :
  """
  Load inlist empty template and return
  it as a list of strings (one element for 
  each line).

  Returns 
  -------
  list
    List of strings, each corresponding to a line of the
    read template. 
  """
  f = importlib.resources.open_text (py_ctdyn.templates, 
                                     "empty_inlist")
  template = [line.rstrip () for line in f]
  f.close ()
  template.insert (0, "This inlist was generated by py_ctdyn, version {}.".format (py_ctdyn.__version__))
  return template

def save_template (filename, template) :
  """
  Save a template provided as a list of string
  into a text file.

  Parameters
  ----------

  filename : str or Path object
    Filename to use in order to write the file.

  template : list 
    List of strings, each corresponding to a line of the
    file to write. 
  """
  with open (filename, "w") as f:
    for line in template :
      f.write (line + "\n")
    f.close ()

def insert_namelist (template, namelist, 
                     namelist_dict) :
  """
  Insert all parameter line related to one type of parameters 
  into the inlist template.

  Parameters
  ----------
  namelist : str
    Name of the namelist to consider.

  template : list 
    List of strings, each corresponding to a line of the
    file to write. 

  namelist_dict : dict
    Dictionary with parameters to insert in the template.

  Returns
  -------
  list
    The updated template as a list of strings.
  """ 
  ii, jj = 0, 0 
  while not "&"+namelist in template[ii] :
    ii+= 1
  for elt in namelist_dict.items () :
    string = "  {}={}".format (elt[0], elt[1])
    template.insert (ii+jj+1, string) 
    jj += 1
  return template

def set_default_inlist (parameters=None) : 
  """
  Set default values for parameter dictionary to populate
  CTDYN inlist.

  Parameters
  ----------
  parameters : dict
    Input dictionary of MESA namelist. The function will
    not override parameters if already set.

  Returns 
  -------
  dict
    Dictionary with the default set of parameters used by ``persephone``.
  """
  if parameters is None :
    parameters = {}
  # Initialising subdictionaries if not provided
  parameters.setdefault ("global", {})
  parameters.setdefault ("grid", {})
  parameters.setdefault ("profiles", {})
  parameters.setdefault ("brent", {})
  parameters.setdefault ("boundaries", {})
  parameters.setdefault ("fields", {})
  parameters.setdefault ("physics", {})
  parameters.setdefault ("outputs", {})
  parameters.setdefault ("controls", {})
  # Creating variable for dictionaries
  global_dict = parameters["global"]
  grid_dict = parameters["grid"]
  profiles = parameters["profiles"]
  brent = parameters["brent"]
  boundaries = parameters["boundaries"]
  fields = parameters["fields"]
  physics = parameters["fields"]
  outputs = parameters["outputs"]
  controls = parameters["controls"]

  # TODO
  outputs.setdefault ("dir", "'.'") 

  return parameters

def parse_input_file (filename) :
    """
    Parse a CTDYN input file and return a 
    ``parameters`` dictionary as used as input
    by the ``py_ctdyn`` interface.

    Returns
    -------
    dict 
      A dictionary of dictionaries that can be passed
      as the ``parameters`` input to ``py_ctdyn``
      functions.
    """
    with open (Path (filename), "r") as f :
        lines = [line.rstrip () for line in f]
    parameters = dict ()
    for line in lines :
        # Splitting to isolate the commented sections
        split = re.split (r"!", line)
        # Checking that it is not an empty line
        elt = re.findall (r"\S+", split[0])
        if len (elt)>0 and elt[0]!="/" :
            if "&" in elt[0] :
                key = re.findall(r"[^&]+", elt[0])[0]
                # Initialising the empty sub-dictionary
                parameters[key] = dict ()
            else :
                parameters[key][elt[0]] = elt[2]   
    return parameters

